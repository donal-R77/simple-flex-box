name: Pipeline

on: 
  push:
    branches: ['main']

env:
  APPLICATION_NAME: flexbox 
  CONTAINER_NAME: flexdeploy

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: echo "done"

  build-image:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{secrets.DOCKERHUB_USERNAME}}
          password: ${{secrets.DOCKERHUB_PASSWORD}}

      - name: Build the Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{secrets.DOCKERHUB_USERNAME}}/${{env.APPLICATION_NAME}}:flex

  deploy-on-aws:
    needs: [build-image]
    name: Deploy to AWS
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3.5.3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  

      - name: "Authentication for production"
        run: |
            aws sts get-caller-identity

      - name: Deploy script to S3
        run: |
          aws s3 cp bash_test.sh s3://macdo-bucket/simple-app-flexbox/ 

      - name: Create EC2 Launch Template for Auto Scaling
        run: |
            aws s3 cp s3://macdo-bucket/simple-app-flexbox/initial-script.sh initial-script.sh 
            USER_DATA=$(base64 -w 0 initial-script.sh)
            aws ec2 create-launch-template \
                --launch-template-name lunch-template-tp \
                --tag-specifications 'ResourceType=launch-template,Tags=[{Key=Name,Value=production}]' \
                --launch-template-data '{
                    "ImageId": "ami-0e86e20dae9224db8", 
                    "InstanceType": "t2.micro",
                    "SecurityGroupIds": ["sg-0b7676a064fe79bed"], 
                    "UserData": "'"${USER_DATA}"'",
                    "TagSpecifications": [{
                    "ResourceType": "instance",
                    "Tags": [{
                    "Key": "Name",
                    "Value": "lunch-template-tp"
                            }]
                        }]
                    }'
                    
    
      - name: Create or update auto scaling group
        run: |
          #if aws autoscaling describe-auto-scaling-groups --auto-scaling-group-name my-asg --region us-east-1; then
          echo "Creating new ASG"
          aws autoscaling create-auto-scaling-group \
              --auto-scaling-group-name my-asg \
              --launch-template "LaunchTemplateName=lunch-template-tp,Version=\$Latest" \
              --min-size 1 --max-size 2 --desired-capacity 1 \
              --vpc-zone-identifier subnet-0cbbc4fbbcb25642e \
              --region us-east-1
              

      - name: Attach ASG to Elastic Load Balancer
        run: |
            aws autoscaling attach-load-balancer-target-groups \
            --auto-scaling-group-name my-asg \
            --target-group-arns arn:aws:elasticloadbalancing:us-east-1:891376976638:targetgroup/my-alb-target-g/cf9eb77b500422ce \
            --region us-east-1
